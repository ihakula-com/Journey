package com.example.sample;

import java.util.Arrays;

import android.content.Context;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.os.Bundle;
import android.os.Handler;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.telephony.TelephonyManager;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import com.facebook.Request;
import com.facebook.Response;
import com.facebook.Session;
import com.facebook.SessionState;
import com.facebook.UiLifecycleHelper;
import com.facebook.model.GraphUser;
import com.facebook.widget.LoginButton;
import com.nutsplay.api.BalanceVO;
import com.nutsplay.api.UserEvents;
import com.nutsplay.paysdk.NutsWebViewActivity;
import com.nutsplay.util.Base64;
import com.nutsplay.util.Base64DecoderException;
import com.nutsplay.util.LogUtil;
import com.nutsplay.util.SharedPreferencesUtil;
import com.nutsplay.util.ToastAlone;

public class MainActivity extends FragmentActivity{
	
	public static final String TAG = "MainActivity";

	private String FACEBOOK_EMAIL = "facebook";
	
	private class MainFragment extends Fragment{
		
		@Override
		public View onCreateView(LayoutInflater inflater, ViewGroup container,Bundle savedInstanceState) {
			  View view = inflater.inflate(R.layout.activity_main, container, false);
	            mLoginButton = (LoginButton) findViewById(R.id.facebook);
	            mLoginButton.setFragment(this);
	            obtainSerialNo = (Button) view.findViewById(R.id.click_serialno);
	            registTv = (Button) view.findViewById(R.id.click_regist);
	            loginTv = (Button) view.findViewById(R.id.click_login);
	            obtainSerialNo = (Button) view.findViewById(R.id.click_serialno);
	            getAccounts = (Button)view.findViewById(R.id.get_accounts);
	            consume = (Button)view.findViewById(R.id.consume);
	            fbUsername = (TextView) view.findViewById(R.id.fb_username);
	            mLoginButton.setReadPermissions(Arrays.asList("me" , "user_likes", "user_status"));
			    return view;
		}
		
		private void onSessionStateChange(Session session, SessionState state, Exception exception) {
		    if (state.isOpened()) {
		        Log.i(TAG, "Logged in..." + session.getAccessToken());
		        Session sessionF = Session.getActiveSession();
		        Log.e(TAG, "Logged in..." + sessionF.getAccessToken());
//		        obtainSerialNo.setText("sessionF : " + sessionF.getAccessToken());
		        Log.v(TAG, "" + sessionF.getAccessToken().equals(session.getAccessToken()));
		        if (sessionF != null && sessionF.isOpened()) {
		            // Get the user's data
		            makeMeRequest(sessionF);
		        }
		        // Get the user's data.
//		        makeMeRequest(sessionF);
		    } else if (state.isClosed()) {
		        Log.i(TAG, "Logged out...");
		        fbUsername.setText("已退出");
		    }
		}
	}
	
	private void makeMeRequest(final Session session) {
	    // Make an API call to get user data and define a 
	    // new callback to handle the response.
        Log.e(TAG, "makeMeRequest...");
	    Request request = Request.newMeRequest(session, new Request.GraphUserCallback() {
	        @Override
	        public void onCompleted(GraphUser user, Response response) {
//            	Log.v("", "user.getName() : " + user.getName());
	            // If the response is successful
	            if (session == Session.getActiveSession()) {
	                if (user != null) {
	                    // Set the id for the ProfilePictureView
	                    // view that in turn displays the profile picture.
//	                    profilePictureView.setProfileId(user.getId());
	                    // Set the Textview's text to the user's name.
	                	Log.v("", "user.getName() : " + user.getName() + obtainSerialNo);
	                	fbUsername.setText("当前用户 : " + user.getName());
	                	
//	                	userEvents.userRequestLoginWithThirdPart(user.getId(), FACEBOOK_EMAIL,true, mLoginCallBack);
	                	
	                	userEvents.userRequestLoginWithThirdPart(user.getId(), FACEBOOK_EMAIL,true , new UserEvents.NutsLoginEventListener() {
	        				
	        				@Override
	        				public void handError(String error) {
	        					//TODO 处理异常情况
	        					if(error.equals(UserEvents.TIMEOUTEXCEPTION)){
	        						//请求超时
	        					}else if(error.equals(UserEvents.IOEXCEPTION)){
	        						//IO异常
	        					}else{
	        						//返回结果非纯数字
	        					}
	        				}
	        				
	        				@Override
	        				public void onLoginComplete(long result) {
	        					Log.i("", "result : " + result);
	        					obtainSerialNo.setText("obtainSerialNo : " + result);
	    	                		fbUsername.setText("当前用户ID : " + result);
	        				}
	        			});
	                }
	            }
	            if (response.getError() != null) {
	                // Handle errors, will do so later.
	            	Log.e("", "response.getError() : " + response.getError());
	            }
	        }
	    });
	    request.executeAsync();
	} 
	
	private MainFragment mainFragment;
    private LoginButton mLoginButton;
    
    private Button launchActivity;
	private Button  registTv , loginTv , obtainSerialNo , getAccounts , service , billing , postMail;
	private Button consume;
	private TextView fbUsername;
	private Handler handler;
	private int serialNo = -10000;
	private String ACCOUNT = "jerome";
	private String PASSWORD = "123456";
	private String OAUTH = "android";
	private String GAME = "android_dt";
	private String REFERENCE = "android_dt";
	private String PACKAGE_REFERENCE = "demo";
	public String SERIAL_NO = "910509";
	/**
	 * 游戏内昵称
	 */
	//roar s1 roar_r
	public String NICK_NAME = "jerome";
	public String SERVER = "s1";
	private String imei;
	
	private UiLifecycleHelper uiHelper;
	
	@Override
	public void onResume() {
	    super.onResume();
//	    Session session = Session.getActiveSession();
//	    if (session != null &&
//	           (session.isOpened() || session.isClosed()) ) {
//	    	mainFragment.onSessionStateChange(session, session.getState(), null);
//	    }
	    uiHelper.onResume(); 
	}
	
	@Override
	public void onPause() {
	    super.onPause();
	    uiHelper.onPause();
	}

	@Override
	public void onDestroy() {
	    super.onDestroy();
	    uiHelper.onDestroy();
	    userEvents.onRelease();
	}

	@Override
	public void onSaveInstanceState(Bundle outState) {
	    super.onSaveInstanceState(outState);
	    uiHelper.onSaveInstanceState(outState);
	}
	
	private Session.StatusCallback statusCallback = new Session.StatusCallback() {
		
		@Override
		public void call(Session session, SessionState state, Exception exception) {
			mainFragment.onSessionStateChange(session, state, exception);
		}
	};
	
	Request.GraphUserCallback graphCallback = new Request.GraphUserCallback() {
		
		@Override
		public void onCompleted(GraphUser user, Response response) {
			
		}
	};
	
	private SharedPreferencesUtil spUtil;

	private UserEvents userEvents;
    
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        uiHelper = new UiLifecycleHelper(this, statusCallback);
        uiHelper.onCreate(savedInstanceState);

        setContentView(R.layout.activity_main);
//        setContentView(R.layout.activity_main);

        if (savedInstanceState == null) {
            // Add the fragment on initial activity setup
            mainFragment = new MainFragment();
            getSupportFragmentManager()
            .beginTransaction()
            .add(android.R.id.content, mainFragment)
            .commit();
        } else {
            // Or set the fragment from restored state info
            mainFragment = (MainFragment) getSupportFragmentManager()
            .findFragmentById(android.R.id.content);
        }
//		String base64EncodedPublicKey = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmjyGuODkYTRGLGgcAIZsvglwJOgb0yHS9Ce2hefWR05lYLoMcdP48YRFBMHvtYRRKNrTNOzI2TEiZfZOmsqe5h/xwHd0iV3sbxhVno78YWchKfTFVJGiaf7DpzNdxbMXU6svLca5Tj8TezJhXHxbeerCfm9mWk1Z28Bj9K++orPLdgLYVgTcZ1xBJLwFWDezDI2Bu3RGm442wG69Cj3gTZYHm83/CAg0G0vy5TZez3G5u1zKhhQJeYJLFT4szOlxWneweHhLiWw2aAOsxUjjn7E9Hc8RHCNv7OTkepBK6w57GM/QO5cOCnJr0p1X4A/zMY2PvNRqRf4eawCCzJeO9wIDAQAB";
		String base64EncodedPublicKey = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmjyGuODkYTRGLGgcAIZsvglwJOgb0yHS9Ce2hefWR05lYLoMcdP48YRFBMHvtYRRKNrTNOzI2TEiZfZOmsqe5h/xwHd0iV3sbxhVno78YWchKfTFVJGiaf7DpzNdxbMXU6svLca5Tj8TezJhXHxbeerCfm9mWk1Z28Bj9K++orPLdgLYVgTcZ1xBJLwFWDezDI2Bu3RGm442wG69Cj3gTZYHm83/CAg0G0vy5TZez3G5u1zKhhQJeYJLFT4szOlxWneweHhLiWw2aAOsxUjjn7E9Hc8RHCNv7OTkepBK6w57GM/QO5cOCnJr0p1X4A/zMY2PvNRqRf4eawCCzJeO9wIDAQAB";

	    ApplicationInfo appInfo = null;
		try {
			appInfo = this.getPackageManager().getApplicationInfo(getPackageName(), PackageManager.GET_META_DATA);
		} catch (NameNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		String msg=appInfo.metaData.getString("com.nutsplay.sdk.base64EncodedPublicKey");
		Log.e(TAG, "msg : " + msg);
        //roar roar s1 roar_r
//        userEvents = new UserEvents(getApplicationContext() , GAME, REFERENCE, SERVER , PACKAGE_REFERENCE , base64EncodedPublicKey);
      userEvents = new UserEvents(getApplicationContext() , "sgl2", "sgl2", "s1" , "sgl2_googleplay" , base64EncodedPublicKey);
//      userEvents = new UserEvents(getApplicationContext() , "android_dt", "android_dt", "s1" , "demo" , base64EncodedPublicKey);
//		 LogUtil.enableLogCat(false);
        handler = new Handler();
        
//		UserEvents.init(getApplicationContext() , GAME , SERVER);
        spUtil = SharedPreferencesUtil.getInstance(getApplicationContext());
//        spUtil.saveGameServer(GAME , SERVER);
        
        Log.e("", "serialNo : " + serialNo);
        if(serialNo == -10000){
    			TelephonyManager telephonyManager=(TelephonyManager) this.getSystemService(Context.TELEPHONY_SERVICE);
    			imei=telephonyManager.getDeviceId(); 		
    			imei = "351823054105669";
    			userEvents.userRequestLoginWithoutAccount(imei,false , mLoginCallBack);
        }
    }
    
    public void onLaunchPayClick(View view){
    		//all third google 
    		String store = "all";
    		userEvents.launchPay(this , SERIAL_NO , store);
    }
    
    public void onLaunchServiceClick(View view){
		userEvents.launchServicePage(this , SERIAL_NO , NICK_NAME);
   }    
    
    public void onLaunchRegClick(View view){
    		userEvents.userRequestReg(imei , ACCOUNT , PASSWORD  , mRegistCallBack);
    }  
    
    public void onLaunchLoginClick(View view){

//		userEvents.userRequestLoginWithThirdPart("100001376954562", "facebook",true, mLoginCallBack);
    		userEvents.userRequestLogin(ACCOUNT, PASSWORD, mLoginCallBack);
    }   
  
    public void onGetSericalNoClick(View view){
    		userEvents.userRequestSerialNo(ACCOUNT, mObtainCallBack);
    }
    
    public void onGetAccountsClick(View view){
		String userId = "886806";	
		userEvents.getAccountAction(userId, mGetAccountsCallBack);
    }
       
    public void onConsumeClick(View view){
		userEvents.consumeAction(ACCOUNT , "consume_item" , "50" , mConsumeCallBack , true);
    }
            
    public void onBillingClick(View view){
    		userEvents.startBilling(this);
	}

	UserEvents.BaseListener  mRegistCallBack = new UserEvents.NutsRegistEventListener() {
		
		@Override
		public void handError(String error) {
			//TODO 处理异常情况
			if(error.equals(UserEvents.TIMEOUTEXCEPTION)){
				//请求超时
			}else if(error.equals(UserEvents.IOEXCEPTION)){
				//IO异常
			}else{
				//返回结果非纯数字
			}
		}
		
		@Override
		public void onRegistComplete(long result) {
			/**
			 * -1	没有访问权限
			 * -10  账号格式错误
			 *-11  查询参数错误
             *-12	链接已经失效
             *-13	账号不存在
             *-14 密码不正确
             *-16 加密验证错误
             *-20 用户名已注册
             *长度>=5的数字表示注册成功，即为账号对应的序列号
			 */
			registTv.setText("onRegistComplete : " + result);
		}

		@Override
		public void bindAccount(long result) {
			//处理绑定结果
		}
	};

	UserEvents.BaseListener mLoginCallBack = new UserEvents.NutsLoginEventListener() {
		
		@Override
		public void handError(String error) {
			//TODO 处理异常情况
			if(error.equals(UserEvents.TIMEOUTEXCEPTION)){
				//请求超时
			}else if(error.equals(UserEvents.IOEXCEPTION)){
				//IO异常
			}else{
				//返回结果非纯数字
			}
		}
		
		@Override
		public void onLoginComplete(long result) {
			/**
			 * -1	没有访问权限
			 *-10  账号格式错误
			 *-11  查询参数错误
			 *-12	链接已经失效
			 *-13	账号不存在
			 *-14 密码不正确
			 *长度>=5的数字，账号对应的序列号
			 */
			loginTv.setText("onLoginComplete : " + result);
		}
	};
	
	UserEvents.BaseListener mObtainCallBack = new UserEvents.NutsObtainEventListener() {
		
		@Override
		public void handError(String error) {
			//TODO 处理异常情况
			if(error.equals(UserEvents.TIMEOUTEXCEPTION)){
				//请求超时
			}else if(error.equals(UserEvents.IOEXCEPTION)){
				//IO异常
			}else{
				//返回结果非纯数字
			}
		}
		
		@Override
		public void handleSerialNo(long serialNo) {
			/**
			 * -1	没有访问权限
			 *-10  账号格式错误
			 *-11  查询参数错误
			 *-12	链接已经失效
			 *-13	账号不存在
			 *-14 密码不正确
			 *长度>=5的数字，账号对应的序列号
			 */
			obtainSerialNo.setText("obtainSerialNo : " + serialNo);
		}
	};
	
	UserEvents.BaseListener mGetAccountsCallBack = new UserEvents.NutsGetAccountsListener() {
		
		@Override
		public void handError(String error) {
			/**
			 * -4 帐号不存在
			 */
			if(error != null && error.length() > 0){
				getAccounts.setText("getAccounts : " + error);
			}
		}
		
		@Override
		public void getAccounts(BalanceVO accounts) {
			Log.e(TAG, "accounts : " + accounts);
			ToastAlone.showToast(getApplicationContext(), accounts + "", Toast.LENGTH_LONG);
		}
	};
	
	UserEvents.BaseListener mConsumeCallBack = new UserEvents.NutsConsumeListener() {
		
		@Override
		public void handError(String error) {
			
		}
		
		@Override
		public void handleConsumeResult(boolean isSuccess) {
			/**
			 * true 消费成功
			 */
			consume.setText("consumeResult : " + (isSuccess?"true":"false"));
//			Log.e(TAG, "" + userEvents.USER_ID);
//			Log.e(TAG, "" + spUtil.getString(SharedPreferencesUtil.USER_SERIAL_NO));
//			Log.e(TAG, "" + spUtil.getString(SharedPreferencesUtil.GAME_PARAMTER));
//			Log.e(TAG, "" + spUtil.getString(SharedPreferencesUtil.SERVER_PARAMTER));
//			Log.e(TAG, "" + spUtil.getString(SharedPreferencesUtil.PACKAGE_PARAMTER));
		}
	};

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		uiHelper.onActivityResult(requestCode, resultCode, data);

		switch (requestCode) {
		case NutsWebViewActivity.REQUEST_CODE:
			if(data.hasExtra(NutsWebViewActivity.HANDLE_RESULT_KEY)){
				int payCode = data.getIntExtra(NutsWebViewActivity.HANDLE_RESULT_KEY, NutsWebViewActivity.PAY_ERROR);
				if(payCode == NutsWebViewActivity.PAY_SUCCESS){
					if(data.hasExtra(NutsWebViewActivity.HANDLE_RESULT_MODEL)){
						String model = data.getStringExtra(NutsWebViewActivity.HANDLE_RESULT_MODEL);
						if(model != null)
							try {
								Toast.makeText(getApplicationContext(), new String(Base64.decode(model)), Toast.LENGTH_LONG).show();
							} catch (Base64DecoderException e) {
								e.printStackTrace();
							}	
					}
					Toast.makeText(getApplicationContext(), "SUCCESS", Toast.LENGTH_SHORT).show();
					//TODO
				}else if(payCode == NutsWebViewActivity.PAY_FAILED){
					Toast.makeText(getApplicationContext(), "FAILED", Toast.LENGTH_SHORT).show();
					//TODO
				}else if(payCode == NutsWebViewActivity.PAY_ERROR){
					//TODO
				}
					
			}
			break;
		}
	}

}

